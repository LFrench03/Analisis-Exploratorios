col = "skyblue",
breaks = breaks,
freq = TRUE)
data("trees")
ggplot2(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
install.packages
install.packages
# Gráfica de Histograma
install.packages("ggplot")
# Gráfica de Histograma
install.packages("ggplot")
ggplot2(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot")
# Gráfica de Histograma
library("ggplot2")
ggplot2(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Boxplot
ggplot(trees, aes(x = "", y = Height)) +
geom_boxplot(fill = "lightgreen", color = "darkgreen") +
theme_light() +
labs(title = "Boxplot de la Altura de los Árboles",
x = "",
y = "Height (altura en pies)")
# Gráfico de barras para Girth
barplot(table(cut(trees$Girth, breaks = 5)),
main = "Gráfico de barras de Girth",
xlab = "Intervalos de Girth",
ylab = "Frecuencia",
col = "lightblue",
border = "black")
# Gráfica de Scatter plot
ggplot(trees, aes(x = Girth, y = Height)) +
geom_point(color = "darkorange", size = 3) +
theme_minimal() +
labs(title = "Relación entre Girth y Height",
x = "Girth (circunferencia en pulgadas)",
y = "Height (altura en pies)")
# Gráfico de dispersión para Girth y Volume
plot(trees$Girth, trees$Volume,
main = "Relación entre Girth y Volume",
xlab = "Girth",
ylab = "Volume",
col = "blue",
pch = 19)
# Gráfico de línea para Height y Volume
plot(trees$Height, trees$Volume,
type = "l",
main = "Relación entre Height y Volume",
xlab = "Height",
ylab = "Volume",
col = "red",
lwd = 2)
# Matriz de correlación
cor(trees)
# Cargar librerías necesarias
library(ggplot2)
library(reshape2)
# Calcular la matriz de correlación
cor_matrix <- cor(trees)
# Mostrar la matriz de correlación
print(cor_matrix)
# Convertir la matriz de correlación en un formato largo
cor_data <- melt(cor_matrix)
# Crear la gráfica de la matriz de correlación
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlación del Dataset trees",
x = "Variables",
y = "Variables")
# Crear la gráfica de la matriz de correlación
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlación del Dataset Trees",
x = "Variables",
y = "Variables")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = scales::comma) + # Usa labels = scales::comma para formatear números con comas
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = scales::comma) + # Usa labels = scales::comma para formatear números con comas
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
library(ggplot2)
library(scales)
# Crea el histograma inicial
p <- ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Extrae las etiquetas del eje Y
y_labels <- ggplot_build(p)$panel$yaxis$labels
# Convierte las etiquetas a enteros
y_labels <- as.integer(y_labels)
# Actualiza el gráfico con las nuevas etiquetas
p <- p + scale_y_continuous(labels = y_labels)
print(p)
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = scales::comma) + # Usa labels = scales::comma para formatear números con comas
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Cargar librerías necesarias
install.packages("e1071")
library(e1071)
data("trees")
# Función para calcular medidas estadísticas
medidas <- function(x) {
c(Media = mean(x),  # Media aritmética
Mediana = median(x),  # Valor central
Moda = as.numeric(names(sort(table(x), decreasing = TRUE)[1])),  # Valor más frecuente
Varianza = var(x),  # Dispersión de los datos
Desviación_Estándar = sd(x),  # Raíz cuadrada de la varianza
Rango = diff(range(x)),  # Diferencia entre el valor máximo y mínimo
Máximo = max(x),  # Valor máximo
Mínimo = min(x),  # Valor mínimo
Coeficiente_de_Variación = sd(x) / mean(x),  # Relación entre la desviación estándar y la media
Simetría = skewness(x),  # Medida de asimetría de la distribución
Curtosis = kurtosis(x))}  # Medida de la "altura" de la distribución
# Aplicar la función a cada variable del dataset trees
resultados <- sapply(trees, medidas)
# Mostrar resultados
print(resultados)
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = scales::comma) + # Usa labels = scales::comma para formatear números con comas
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
trees$Volume <- round(trees$Volume)
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Cargar la biblioteca ggplot2
library(ggplot2)
# Crear el histograma
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_x_discrete(breaks = seq(min(trees$Volume), max(trees$Volume), by = 5)) + # Ajustar los puntos de interrupción para que sean múltiplos de 5
scale_y_continuous(labels = scales::comma) + # Formatear las etiquetas de las frecuencias como enteros
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Crear el histograma
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = scales::comma) + # Formatear las etiquetas de las frecuencias como enteros
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(,binwidth = 5, fill = "skyblue", color = "black") +
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Cargar las bibliotecas necesarias
library(ggplot2)
# Definir la función para formatear las etiquetas como enteros
format_enteros <- function(x) {
round(x)
}
# Crear el histograma
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = function(x) format_enteros(x)) + # Aplicar la función para formatear las etiquetas
theme_classic() +
labs(title = "Distribución del Volumen de los Árboles",
x = "Volume (pies cúbicos)",
y = "Frecuencia")
# Gráfica de Boxplot
ggplot(trees, aes(x = "", y = Height)) +
geom_boxplot(fill = "lightgreen", color = "darkgreen") +
theme_light() +
labs(title = "Boxplot de la Altura de los Árboles",
x = "",
y = "Height (altura en pies)")
# Gráfico de barras para Girth
barplot(table(cut(trees$Girth, breaks = 5)),
main = "Gráfico de barras de Girth",
xlab = "Intervalos de Girth",
ylab = "Frecuencia",
col = "lightblue",
border = "black")
# Gráfica de Scatter plot
ggplot(trees, aes(x = Girth, y = Height)) +
geom_point(color = "darkorange", size = 3) +
theme_minimal() +
labs(title = "Relación entre Girth y Height",
x = "Girth (circunferencia en pulgadas)",
y = "Height (altura en pies)")
# Gráfico de dispersión para Girth y Volume
plot(trees$Girth, trees$Volume,
main = "Relación entre Girth y Volume",
xlab = "Girth",
ylab = "Volume",
col = "blue",
pch = 19)
# Gráfico de línea para Height y Volume
plot(trees$Height, trees$Volume,
type = "l",
main = "Relación entre Height y Volume",
xlab = "Height",
ylab = "Volume",
col = "red",
lwd = 2)
# Cargar librerías necesarias
library(ggplot2)
library(reshape2)
# Matriz de correlación
cor(trees)
# Cargar librerías necesarias
library(ggplot2)
library(reshape2)
# Calcular la matriz de correlación
cor_matrix <- cor(trees)
# Mostrar la matriz de correlación
print(cor_matrix)
# Convertir la matriz de correlación en un formato largo
cor_data <- melt(cor_matrix)
# Crear la gráfica de la matriz de correlación
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlación del Dataset Trees",
x = "Variables",
y = "Variables")
View(cor_data)
# Cargar el dataset
data(trees)
# Ver todas las filas del dataset
head(trees,31)
medidas <- function(x) {    # Mostrar resultados
c(Media = mean(x),# Media aritmetica
Mediana = median(x),# Valor central
Moda = as.numeric(names(sort(table(x), decreasing = TRUE)[1])),# Valor mas frecuente
Varianza = var(x),# Dispersion de los datos
Desviacion_Estandar = sd(x),# Raiz cuadrada de la varianza
Rango = diff(range(x)),# Diferencia entre el valor maximo y minimo
Maximo = max(x),# Valor maximo
Minimo = min(x),# Valor minimo
Coeficiente_Variacion = sd(x) / mean(x),# Relacion entre la desviacion estandar y la media
Simetria = skewness(x),  # Medida de asimetria de la distribucion
Curtosis = kurtosis(x))} # Medida de la "altura" de la distribucion
# Aplicar la funcion a cada variable del dataset trees
resultados <- sapply(trees, medidas)
print(resultados)   # Mostrar resultados
# Cargar librerias necesarias
library(e1071)
medidas <- function(x) {    # Mostrar resultados
c(Media = mean(x),# Media aritmetica
Mediana = median(x),# Valor central
Moda = as.numeric(names(sort(table(x), decreasing = TRUE)[1])),# Valor mas frecuente
Varianza = var(x),# Dispersion de los datos
Desviacion_Estandar = sd(x),# Raiz cuadrada de la varianza
Rango = diff(range(x)),# Diferencia entre el valor maximo y minimo
Maximo = max(x),# Valor maximo
Minimo = min(x),# Valor minimo
Coeficiente_Variacion = sd(x) / mean(x),# Relacion entre la desviacion estandar y la media
Simetria = skewness(x),  # Medida de asimetria de la distribucion
Curtosis = kurtosis(x))} # Medida de la "altura" de la distribucion
# Aplicar la funcion a cada variable del dataset trees
resultados <- sapply(trees, medidas)
print(resultados)   # Mostrar resultados
# Crear el histograma
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = function(x) format_enteros(x)) + # Aplicar la funcion para formatear las etiquetas
theme_classic() +
labs(title = "Distribucion del Volumen de los Arboles",
x = "Volume (pies cubicos)",
y = "Frecuencia")
# Crear el histograma
library("ggplot2")
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = function(x) format_enteros(x)) + # Aplicar la funcion para formatear las etiquetas
theme_classic() +
labs(title = "Distribucion del Volumen de los Arboles",
x = "Volume (pies cubicos)",
y = "Frecuencia")
library(ggplot2)
# Definir la funcion para formatear las etiquetas como enteros
format_enteros <- function(x) {
round(x)
}
# Crear el histograma
ggplot(trees, aes(x = Volume)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
scale_y_continuous(labels = function(x) format_enteros(x)) + # Aplicar la funcion para formatear las etiquetas
theme_classic() +
labs(title = "Distribucion del Volumen de los Arboles",
x = "Volume (pies cubicos)",
y = "Frecuencia")
# Grafica de Boxplot
ggplot(trees, aes(x = "", y = Height)) +
geom_boxplot(fill = "lightgreen", color = "darkgreen") +
theme_light() +
labs(title = "Boxplot de la Altura de los Arboles",
x = "",
y = "Height (altura en pies)")
# Grafica de Boxplot
ggplot(trees, aes(x = "", y = Height)) +
geom_boxplot(fill = "lightgreen", color = "darkgreen") +
theme_light() +
labs(title = "Boxplot de la Altura de los Arboles",
x = "",
y = "Height (altura en pies)")
barplot(table(cut(trees$Girth, breaks = 5)),
main = "Grafico de barras de Girth",
xlab = "Intervalos de Girth",
ylab = "Frecuencia",
col = "lightblue",
border = "black")
# Grafica de Scatter plot
ggplot(trees, aes(x = Girth, y = Height)) +
geom_point(color = "darkorange", size = 3) +
theme_minimal() +
labs(title = "Relacion entre Girth y Height",
x = "Girth (circunferencia en pulgadas)",
y = "Height (altura en pies)")
# Grafico de linea para Height y Volume
plot(trees$Height, trees$Volume,
type = "l",
main = "Relacion entre Height y Volume",
xlab = "Height",
ylab = "Volume",
col = "red",
lwd = 2)
# Convertir la matriz de correlacion en un formato largo
cor_data <- melt(cor_matrix)
# Crear la grafica de la matriz de correlacion
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlacion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlacion del Dataset Trees",
x = "Variables",
y = "Variables")
library("reshape2")
# Convertir la matriz de correlacion en un formato largo
cor_data <- melt(cor_matrix)
# Crear la grafica de la matriz de correlacion
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlacion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlacion del Dataset Trees",
x = "Variables",
y = "Variables")
# Matriz de correlacion
cor(trees)
# Cargar librerias necesarias
library(ggplot2)
library(reshape2)
# Calcular la matriz de correlacion
cor_matrix <- cor(trees)
# Mostrar la matriz de correlacion
print(cor_matrix)
# Matriz de correlacion
cor(trees)
# Cargar librerias necesarias
library(ggplot2)
library(reshape2)
# Calcular la matriz de correlacion
cor_matrix <- cor(trees)
library("reshape2")
# Convertir la matriz de correlacion en un formato largo
cor_data <- melt(cor_matrix)
# Crear la grafica de la matriz de correlacion
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlacion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlacion del Dataset Trees",
x = "Variables",
y = "Variables")
# Convertir la matriz de correlacion en un formato largo
cor_data <- melt(cor_matrix)
# Crear la grafica de la matriz de correlacion
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlacion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matriz de Correlacion del Dataset Trees",
x = "Variables",
y = "Variables")
